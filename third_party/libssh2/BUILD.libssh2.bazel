load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")

filegroup(
    name = "all",
    srcs = glob(["**"]),
)

_CACHE_ENTRIES = {
    "BUILD_EXAMPLES": "off",
    "BUILD_SHARED_LIBS": "off",
    "BUILD_TESTING": "off",
    "CMAKE_FIND_DEBUG_MODE": "on",
    "CMAKE_PREFIX_PATH": "$EXT_BUILD_DEPS/openssl",
}

_LINUX_CACHE_ENTRIES = dict(_CACHE_ENTRIES.items() + {
    "CMAKE_C_FLAGS": "-fPIC",
}.items())

cmake(
    name = "libssh2",
    cache_entries = select({
        "@rules_rust//rust/platform:linux": _LINUX_CACHE_ENTRIES,
        "//conditions:default": _CACHE_ENTRIES,
    }),
    lib_source = "//:all",
    out_static_libs = select({
        # TODO: I'm guessing at this name. Needs to be checked on windows.
        "@rules_rust//rust/platform:windows": ["ssh2.lib"],
        "//conditions:default": ["libssh2.a"],
    }),
    visibility = ["//visibility:public"],
    deps = ["@cargo_raze__openssl//:openssl"],
)

filegroup(
    name = "gen_dir",
    srcs = [":libssh2"],
    output_group = "gen_dir",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fix_pkgconfig",
    srcs = [":gen_dir"],
    outs = ["pkgconfig/libssh2.pc"],
    # Get rid of ${EXT_BUILD_ROOT}/ in the pkgconfig file so it references
    # libssh2 resources from the root of the project rather than expanding
    # EXT_BUILD_ROOT to "" and resulting in a pkgconfig that claims to start
    # at the filesystem root (/).
    cmd = """
        mkdir -p pkgconfig
        DIR=($(execpath :gen_dir))
        SRC="$${DIR}/lib/pkgconfig/libssh2.pc"
        sed -e "s|.{EXT_BUILD_ROOT}/||g" -e "s|-lssh2|libssh2.a|g" < $$SRC > $@
    """,
    visibility = ["//visibility:public"],
)
